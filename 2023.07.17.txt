
== Script 동작 순서 직접 지정하기 ==

유니티 상단 좌측 edit => project setting = > Script Exeqution Order

스크립트의 숫자 - 999 ~ 1000 까지 지정하기
낮은 숫자의 스크립트부터 우선 실행



== 델리게이트(Delegate) ==

함수를 변수에 담아서 사용하는 것

Ex)
1. 데이터 타입 필드 선언
 private delegate void MyLogFunc(object message);

2. 선언된 데이터 타입에 변수 선언 및 함수 초기화

 MyLogFunc logFunc = Debug.Log;

3. 초기화 된 변수는 호출시 해당 함수기능을 사용 가능

logFunc("변수 호출로도 Debug.Log() 의 기능을 해낸다.);


같은 타입의 선언

Ex_1 ) private System.Func(object).MyLogFunc;

Ex_2 ) private delegate object MyLogFunc( string str, int i1, int i2); 



== 람다 ==
== DFS 알고리즘 ==


==  InputSystem 이벤트 만들기 ==

유니티 상단 window => PackageManager => 상단에 Packages : 를 Unity Registry로 고정 =>
Input System 찾아서 클릭, 우측하단 DownLoad => Donwload가 완료되었으면 Packages
: InProject 에 들어가면 Input System이 추가되어 있다.

이후 Aseets 탭에서 Create 항목 최하단에 Input Actions가 추가된것을 확인할 수 있다.

new Action을 만들고 창을 열어 좌측 상단에 no control schemes 에서 Add control Sc
heme 를 누르면 이름 지정과 List is Empty 에서 키입력 받을 장치를 추가할수 있다.

이후 
1. 가장 좌측 Action Maps에 새 이름 지정
2. 그 다음 탭 Actions에서 New action의 +를 눌러 Add Binding 을 누르고 생겨난 No
Binding 클릭
3. 우측 정보창에서 Path 탭을눌러 Keyboard => By Charactor Mapped to Key
=> 지정하고 싶은 키 선택
4. 설정이 완료되었으면 상단에 Save Asset 을 직접 눌러주거나 Auto-Save 체크 해주기

New Action 생성후 설정이 완료된 후
1. 액션을 할 오브젝트에 Add Component => Player Input 을 추가
2. Player Input 컴포넌트창의 Actions 에 생성했던 New Action 할당
3. 바로 밑 Default Scheme에 수행동작을 만들어둔 스크립트 할당

=> 해당 스크립트 작성법
해당하는 키 입력을 받으면 이벤트 발생 형식으로 호출되게 한다
ex) OnTrigger, OnCollision....

public void On + Actions에서 지정했던 이름

ex) public void OnMoveForward()


